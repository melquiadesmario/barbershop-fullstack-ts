generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model agendamento {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cliente_id         String   @db.Uuid
  barbeiro_id        String   @db.Uuid
  servico_id         String   @db.Uuid
  data_hora_agendada DateTime @db.Timestamptz(6)
  status             String   @db.VarChar(20)
  valor_total        Decimal  @db.Decimal(10, 2)
  barbeiro           barbeiro @relation(fields: [barbeiro_id], references: [usuario_id], onUpdate: NoAction, map: "fk_barbeiro")
  usuario            usuario  @relation(fields: [cliente_id], references: [id], onUpdate: NoAction, map: "fk_cliente")
  servico            servico  @relation(fields: [servico_id], references: [id], onUpdate: NoAction, map: "fk_servico")
  venda              venda?

  @@unique([barbeiro_id, data_hora_agendada])
}

model barbeiro {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  usuario_id       String        @unique @db.Uuid
  biografia        String?
  data_contratacao DateTime?     @db.Date
  agendamento      agendamento[]
  usuario          usuario       @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_usuario_barbeiro")
}

model cargo {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome      String    @unique @db.VarChar(50)
  descricao String?
  usuario   usuario[]
}

model produto {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome         String         @unique @db.VarChar(100)
  descricao    String?
  preco        Decimal        @db.Decimal(10, 2)
  estoque      Int            @default(0)
  vendaproduto vendaproduto[]
}

model servico {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome            String        @unique @db.VarChar(100)
  descricao       String?
  preco           Decimal       @db.Decimal(10, 2)
  duracao_minutos Int
  ativo           Boolean?      @default(true)
  agendamento     agendamento[]
}

model usuario {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cargo_id    String        @db.Uuid
  nome        String        @db.VarChar(100)
  email       String        @unique @db.VarChar(100)
  senha_hash  String        @db.VarChar(255)
  telefone    String?       @db.VarChar(20)
  criado_em   DateTime?     @default(now()) @db.Timestamptz(6)
  ativo       Boolean?      @default(true)
  agendamento agendamento[]
  barbeiro    barbeiro?
  cargo       cargo         @relation(fields: [cargo_id], references: [id], onUpdate: NoAction, map: "fk_cargo")
  venda       venda[]
}

model venda {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  usuario_id     String         @db.Uuid
  agendamento_id String?        @unique @db.Uuid
  data_venda     DateTime?      @default(now()) @db.Timestamptz(6)
  valor_final    Decimal        @db.Decimal(10, 2)
  agendamento    agendamento?   @relation(fields: [agendamento_id], references: [id], onUpdate: NoAction, map: "fk_agendamento_venda")
  usuario        usuario        @relation(fields: [usuario_id], references: [id], onUpdate: NoAction, map: "fk_registrador")
  vendaproduto   vendaproduto[]
}

model vendaproduto {
  venda_id       String  @db.Uuid
  produto_id     String  @db.Uuid
  quantidade     Int
  preco_unitario Decimal @db.Decimal(10, 2)
  produto        produto @relation(fields: [produto_id], references: [id], onUpdate: NoAction, map: "fk_produto")
  venda          venda   @relation(fields: [venda_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_venda")

  @@id([venda_id, produto_id])
}
